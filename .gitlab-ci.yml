stages:
  - build
  - test
  - release
.include:
  - template: Security/SAST.gitlab-ci.yml
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

build-code-job: # задача с именем build-code-job
  stage: build   # этап build
  cache:
    - key: npm
      paths:
        - frontend/.npm/
    - key: maven
      paths:
        - .m2/repository
  script: # объявление скрипта
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта
    - cd backend
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository  # запуск сборки кодаtarget
    - cd ../frontend
    - npm ci --cache .npm --prefer-offline # загрузка зависимостей из кеша
    - npm run build # запуск сборки кода
    - cd ..
    - mkdir sausage-store-${VERSION}  # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
    - mv backend/target/sausage-store-${VERSION}.jar sausage-store-${VERSION}/sausage-store-${VERSION}.jar # копирование собранного бэкенда
    - mv frontend/dist/frontend sausage-store-${VERSION}/public_html # копирование собранного фронтэнда
  artifacts:
    paths:
      - sausage-store-${VERSION}/public_html  # сохранение собранного фронтэнда как артефакт
      - sausage-store-${VERSION}/sausage-store-${VERSION}.jar # сохранение собранного бэкенда как артефакт
      - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST
    reports:
      dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт

.spotbugs-sast:
  stage: test
  dependencies:
    - build-code-job
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

.sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  dependencies:
    - build-code-job
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK}

.sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  dependencies:
    - build-code-job
  script:
    - cd frontend
    - >
      sonar-scanner \
        -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT} \
        -Dsonar.sources=. \
        -Dsonar.host.url=${SONARQUBE_URL} \
        -Dsonar.login=${SONAR_LOGIN} \
        -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONT}

upload-release: # задача с именем upload-release
  #  variables:
  #    GIT_STRATEGY: none
  stage: release # этап release
  dependencies:
    - build-code-job
  # only: # запуск этого шага только при изменениях в директориях backend и frontend
  #   changes:
  #   - backend//*
  #   - frontend//*
  script:
    - echo "Get artifact from job ${ARTIFACT_JOB_ID}"
    - cd backend
    - mvn -s settings.xml deploy -DskipTests -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION}
    - cd ../sausage-store-${VERSION}
    - tar czvf sausage-store-${VERSION}.tar.gz public_html
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_FRONTEND_URL}/sausage-store-front/sausage-store/$VERSION/sausage-store-$VERSION.tar.gz
    #    - > # скачивание артефакта в файл sausage-store-${VERSION}.zip
    #      curl --location --output sausage-store-${VERSION}.zip -H "PRIVATE-TOKEN: ${MY_TOKEN}"
    #      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${ARTIFACT_JOB_ID}/artifacts/"
    #    - > # сохранение артефакта в package registry
    #      curl -sSL -H "JOB-TOKEN: ${CI_JOB_TOKEN}"
    #      -T sausage-store-${VERSION}.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sausage-store/${CI_COMMIT_SHA}/"

    - > # уведомление в slack о выполнении пайплайна
      curl -X POST -H "Content-type: application/json" --data "{\"text\":\"Вышла новая версия сосисочной — $VERSION from $GITLAB_USER_LOGIN.
      Скачать фронт можно по ссылке — ${NEXUS_REPO_FRONTEND_URL}/sausage-store-front/sausage-store/$VERSION/sausage-store-$VERSION.tar.gz.
      Скачать бэкенд можно по ссылке — ${NEXUS_REPO_BACKEND_URL}/com/yandex/practicum/devops/sausage-store/$VERSION/sausage-store-$VERSION.jar\"}" ${NOTIFY_SLACK_URL}
