stages:
  - build
  - test
  - release
  - deploy
.include:
  - template: Security/SAST.gitlab-ci.yml
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ./.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90

cache:
  - key: maven
    paths:
      - .m2/repository

build-code-job: # задача с именем build-code-job
  stage: build   # этап build
  script: # объявление скрипта
    - cd backend
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
#  artifacts:
#      paths:
#        - sausage-store-${VERSION}/sausage-store-${VERSION}.jar # сохранение собранного бэкенда как артефакт
#        - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST

.spotbugs-sast:
  stage: test
  dependencies:
    - build-code-job
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  dependencies:
    - build-code-job
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK}

upload-release: # задача с именем upload-release
  stage: release # этап release
  script:
    - cd backend
    - mvn -s settings.xml deploy -DskipTests -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION}
    - - > # уведомление в slack о выполнении пайплайна
        curl -X POST -H "Content-type: application/json" --data "{
                                                         	\"blocks\": [
                                                         		{
                                                         			\"type\": \"section\",
                                                         			\"text\": {
                                                         				\"type\": \"mrkdwn\",
                                                         				\"text\": \"Вышла новая версия сосисочной :pepe-exhausted: — $VERSION from $GITLAB_USER_LOGIN.\nСкачать бекенд можно по ссылке\"
                                                         			},
                                                         			\"accessory\": {
                                                         				\"type\": \"button\",
                                                         				\"text\": {
                                                         					\"type\": \"plain_text\",
                                                         					\"text\": \"Backend\",
                                                         					\"emoji\": true
                                                         				},
                                                         				\"value\": \"Frontend\",
                                                         				\"url\": \"${NEXUS_REPO_BACKEND_URL}/com/yandex/practicum/devops/sausage-store/$VERSION/sausage-store-$VERSION.jar\",
                                                         				\"action_id\": \"button-action\"
                                                         			}
                                                         		}
                                                         	]
                                                         }" ${NOTIFY_SLACK_URL}

deploy:
  stage: deploy
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_BACKEND_URL=${NEXUS_REPO_BACKEND_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./backend/deploy.sh