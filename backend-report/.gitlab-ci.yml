stages:
  - build
  - test
  - release
  - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - local: /template.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  #JAVA_OPTS: -XX:MaxRAMPercentage=90
  SAST_EXCLUDED_ANALYZERS: "eslint,nodejs-scan-sast"

cache: &global_cache
  key: maven
  paths:
    - .m2/repository


build-docker-kaniko:
  stage: build
  cache: [ ]
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  extends: .docker-registry-auth
  script:
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend-report"
      --dockerfile "${CI_PROJECT_DIR}/backend-report/Dockerfile"
      --cache-copy-layers
      --destination "${CI_REGISTRY_IMAGE}/${DOCKER_BACKEND_REPORT_NAME}:${VERSION}"
      --cache=true

build-code-job: # задача с именем build-code-job
  stage: build   # этап build
  cache:
    <<: *global_cache
  script: # объявление скрипта
    - cd backend-report
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository

spotbugs-sast:
  stage: test
  cache:
    <<: *global_cache
    policy: pull
  variables:
    COMPILE: "false"
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

.sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  cache: [ ]
  script:
    - cd backend-report
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK_REPORT}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK_REPORT}

upload-docker-latest:
  variables:
    GIT_STRATEGY: none
  #image: docker:20.10.12-dind-rootless
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/$DOCKER_BACKEND_REPORT_NAME:$VERSION latest

deploy-docker-compose:
  stage: deploy
  cache: [ ]
  image: docker:20.10.12-dind
  when: manual
  extends: .docker-compose-init
  script:
    - docker-compose --context sausage-store pull backend-report
    - docker-compose --context sausage-store up -d --force-recreate backend-report
    - docker --context sausage-store ps

deploy-argocd:
  stage: deploy
  cache: []
  image: argoproj/argocd:v2.3.3
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
    - when: on_success
  script:
    - argocd --grpc-web --auth-token $ARGO_TOKEN --server $ARGO_SERVER app set $ARGO_APP -p backend-report.image.tag=$VERSION
    - argocd --grpc-web --auth-token $ARGO_TOKEN --server $ARGO_SERVER app sync $ARGO_APP