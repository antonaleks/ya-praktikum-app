stages:
  - build
  - test
  - release
  - deploy
include:
  - template: Security/SAST.gitlab-ci.yml
  - local: /template.gitlab-ci.yml
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: "spotbugs"


build-code-job: # задача с именем build-code-job
  stage: build   # этап build
  cache:
    - key: npm
      paths:
        - frontend/.npm/
  script: # объявление скрипта
    - cd frontend
    - npm ci --cache .npm --prefer-offline # загрузка зависимостей из кеша
    - npm run build # запуск сборки кода
    - cd ..
    - mkdir sausage-store-${VERSION}  # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
    - mv frontend/dist/frontend sausage-store-${VERSION}/public_html # копирование собранного фронтэнда
  artifacts:
    paths:
      - sausage-store-${VERSION}/public_html  # сохранение собранного фронтэнда как артефакт

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  dependencies:
    - build-code-job
  script:
    - cd frontend
    - >
      sonar-scanner \
        -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT} \
        -Dsonar.sources=. \
        -Dsonar.host.url=${SONARQUBE_URL} \
        -Dsonar.login=${SONAR_LOGIN} \
        -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONT}

upload-release: # задача с именем upload-release
  stage: release # этап release
  dependencies:
    - build-code-job
  script:
    - tar czvf sausage-store-${VERSION}.tar.gz sausage-store-${VERSION}/public_html
    - >
      curl -v -u "${NEXUS_REPO_USER}:$(echo $NEXUS_REPO_PASS | base64 -d)" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_FRONTEND_URL}/sausage-store-front/sausage-store/$VERSION/sausage-store-$VERSION.tar.gz
    - |
      generate_post_data()
      {
      cat <<EOF
      {
        "blocks": [
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "Вышла новая версия сосисочной :pepeclap: — $VERSION from $GITLAB_USER_LOGIN.\nСкачать фронт можно по ссылке"
                },
                "accessory": {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": "Frontend",
                        "emoji": true
                    },
                    "value": "Frontend",
                    "url": "${NEXUS_REPO_FRONTEND_URL}/sausage-store-front/sausage-store/$VERSION/sausage-store-$VERSION.tar.gz",
                    "action_id": "button-action"
                }
            }
        ]
      }
      EOF
      }
      curl -X POST -H "Content-type: application/json" --data  "$(generate_post_data)" ${NOTIFY_SLACK_URL}



deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
    - when: on_success
  extends: .ssh-connection
  environment:
    name: staging-front
    url: http://$DEV_HOST:$DEV_APP_PORT
  script:
    - scp ./frontend/sausage-store-frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-frontend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}"; export "FRONT_PORT=${DEV_APP_PORT}";export "NEXUS_REPO_FRONTEND_URL=${NEXUS_REPO_FRONTEND_URL}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=$NEXUS_REPO_PASS";setsid /bin/bash -s " < ./frontend/deploy.sh